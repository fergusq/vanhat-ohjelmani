/* Generated by JTB 1.4.4 */


options
{
  JDK_VERSION = "1.5";
  static = true;
}

PARSER_BEGIN(Qls)
package qls;

import java.io.FileInputStream;
import java.io.File;
import qls.syntaxtree.*;
import qls.visitor.*;
import qls.interpreter.*;
import qls.core.*;
import qls.syntaxtree.*;


public class Qls {

  public static void main(String args[]) {
    FileInputStream in = null;
    try {
      in = new FileInputStream(new File(args[0]));
    }
    catch (Exception e) {
      System.out.println("Reading from standard input...");
    }
    System.out.println("Happy hacking! :)");
    new Qls(args.length == 0 ? System.in : in);
    try {
      Start start = Qls.Start();
      new Interpreter().visit(start);
    }
    catch (LanguageException e) {
      System.out.println(e.getMessage());
    }
    catch (Exception e) {
      System.out.println("Oops.");
      System.out.println(e.getMessage());
    }
  }
}


class MyVisitor extends DepthFirstVoidVisitor {

  public void visit(NodeToken n) {
    System.out.println("visit " + n.tokenImage);
  }
}

class JTBToolkit {

  static NodeToken makeNodeToken(final Token t) {
    return new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
  }
}

PARSER_END(Qls)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| < "//" ( ~["\n", "\r"] )* ( "\n"| "\r"| "\r\n" ) >
| < "/*" ( ~["*"] )* "*" ( ~["/"] ( ~["*"] )* "*" )* "/" >
}

TOKEN :
{
  < USE : "use" >
| < IF : "if" >
| < THEN : "then" >
| < WHILE : "while" >
| < DO : "do" >
| < END : "end" >
| < LOCAL : "local" >
| < CREATE : "create" >
| < NEW : "new" >
| < TO : "to" >
| < SET : "set" >
| < PROCEED : "proceed" >
| < MAIN : "main" >
| < GLOBAL : "global" >
| < ME : "me" >
| < GETFROM : "getfrom" >
| < RETURN : "return" >
| < CMD : "cmd" >
| < INT : "int" >
| < STRING : "string" >
| < FUNCTION : "function" >
| < VARARRAY : "vararray" >
}

TOKEN :
{
  < DOT : "." >
| < COLON : ":" >
| < COMMA : "," >
| < ARROW : "->" >
| < EQ : "=" >
| < GT : ">" >
| < LT : "<" >
| < GE : ">=" >
| < LE : "<=" >
| < NE : "<>" >
| < PLUS : "+" >
| < MINUS : "-" >
| < MUL : "*" >
| < DIV : "/" >
| < MOD : "%" >
| < AND : "&" >
}

TOKEN :
{
  < INTEGER_LITERAL : <DECIMAL_LITERAL> ( ["l", "L"] )?| <HEX_LITERAL> ( ["l", "L"] )?| <OCTAL_LITERAL> ( ["l", "L"] )? >
| < #DECIMAL_LITERAL : ["1"-"9"] ( ["0"-"9"] )* >
| < #HEX_LITERAL : "0" ["x", "X"] ( ["0"-"9", "a"-"f", "A"-"F"] )+ >
| < #OCTAL_LITERAL : "0" ( ["0"-"7"] )* >
| < STRING_LITERAL : "'" ( ( ~["'", "\\"] )| ( "\\" ( ["n", "t", "b", "r", "f", "\\", "'", "\""]| ["0"-"7"] ( ["0"-"7"] )?| ["0"-"3"] ["0"-"7"] ["0"-"7"] ) ) )* "'" >
}

TOKEN :
{
  < IDENTIFIER : <LETTER> ( <LETTER>| <DIGIT> )* >
| < #LETTER : ["_", "a"-"z", "A"-"Z"] >
| < #DIGIT : ["0"-"9"] >
}

Start Start() :
{
  // --- JTB generated node declarations ---
  NodeListOptional n0 = new NodeListOptional();
  NodeSequence n1 = null;
  Use n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeListOptional n7 = new NodeListOptional();
  GlobalExpression n8 = null;
  Main n9 = null;
  NodeListOptional n10 = new NodeListOptional();
  GlobalExpression n11 = null;
  NodeToken n12 = null;
  Token n13 = null;
}
{
  (
    { n1 = new NodeSequence(2); }
    n2 = Use()
    { n1.addNode(n2); }
    n4 = "."
    { n3 = JTBToolkit.makeNodeToken(n4); }
    { n1.addNode(n3); }
    { n0.addNode(n1); }
  )*
  { n0.nodes.trimToSize(); }
  n6 = "me"
  { n5 = JTBToolkit.makeNodeToken(n6); }
  (
    n8 = GlobalExpression()
    { n7.addNode(n8); }
  )*
  { n7.nodes.trimToSize(); }
  n9 = Main()
  (
    n11 = GlobalExpression()
    { n10.addNode(n11); }
  )*
  { n10.nodes.trimToSize(); }
  n13 = "end"
  { n12 = JTBToolkit.makeNodeToken(n13); }
  { return new Start(n0, n5, n7, n9, n10, n12); }
}

GlobalExpression GlobalExpression() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  FieldDeclaration n1 = null;
  CreateNew n2 = null;
}
{
  (
    n1 = FieldDeclaration()
    { n0 = new NodeChoice(n1, 0, 2); }
  |
    n2 = CreateNew()
    { n0 = new NodeChoice(n2, 1, 2); }
  )
  { return new GlobalExpression(n0); }
}

CreateNew CreateNew() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeChoice n4 = null;
  FuncExpression n5 = null;
  CmdExpression n6 = null;
}
{
  n1 = "create"
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = "new"
  { n2 = JTBToolkit.makeNodeToken(n3); }
  (
    (
      n5 = FuncExpression()
      { n4 = new NodeChoice(n5, 0, 2); }
    |
      n6 = CmdExpression()
      { n4 = new NodeChoice(n6, 1, 2); }
    )
    
  )
  { return new CreateNew(n0, n2, n4); }
}

Use Use() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeList n2 = new NodeList();
  NodeToken n3 = null;
  Token n4 = null;
}
{
  n1 = "use"
  { n0 = JTBToolkit.makeNodeToken(n1); }
  (
    n4 = < IDENTIFIER >
    { n3 = JTBToolkit.makeNodeToken(n4); }
    { n2.addNode(n3); }
  )+
  { n2.nodes.trimToSize(); }
  { return new Use(n0, n2); }
}

Main Main() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeListOptional n2 = new NodeListOptional();
  StatementExpression n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
}
{
  n1 = "main"
  { n0 = JTBToolkit.makeNodeToken(n1); }
  (
    n3 = StatementExpression()
    { n2.addNode(n3); }
  )*
  { n2.nodes.trimToSize(); }
  n5 = "end"
  { n4 = JTBToolkit.makeNodeToken(n5); }
  { return new Main(n0, n2, n4); }
}

StatementExpression StatementExpression() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  VariableDeclaration n1 = null;
  VariableAssign n2 = null;
  JavaStaticMethods n3 = null;
  IfExpression n4 = null;
  WhileExpression n5 = null;
  CmdExpression n6 = null;
  Proceed n7 = null;
}
{
  (
    n1 = VariableDeclaration()
    { n0 = new NodeChoice(n1, 0, 7); }
  |
    LOOKAHEAD( 2 )
    n2 = VariableAssign()
    { n0 = new NodeChoice(n2, 1, 7); }
  |
    n3 = JavaStaticMethods()
    { n0 = new NodeChoice(n3, 2, 7); }
  |
    n4 = IfExpression()
    { n0 = new NodeChoice(n4, 3, 7); }
  |
    n5 = WhileExpression()
    { n0 = new NodeChoice(n5, 4, 7); }
  |
    n6 = CmdExpression()
    { n0 = new NodeChoice(n6, 5, 7); }
  |
    n7 = Proceed()
    { n0 = new NodeChoice(n7, 6, 7); }
  )
  { return new StatementExpression(n0); }
}

FieldDeclaration FieldDeclaration() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  VariableName n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  VariableValue n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
}
{
  n1 = "global"
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n2 = VariableName()
  n4 = "to"
  { n3 = JTBToolkit.makeNodeToken(n4); }
  n5 = VariableValue()
  n7 = "."
  { n6 = JTBToolkit.makeNodeToken(n7); }
  { return new FieldDeclaration(n0, n2, n3, n5, n6); }
}

VariableDeclaration VariableDeclaration() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  VariableName n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  VariableValue n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
}
{
  n1 = "local"
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n2 = VariableName()
  n4 = "to"
  { n3 = JTBToolkit.makeNodeToken(n4); }
  n5 = VariableValue()
  n7 = "."
  { n6 = JTBToolkit.makeNodeToken(n7); }
  { return new VariableDeclaration(n0, n2, n3, n5, n6); }
}

VariableAssign VariableAssign() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  VariableName n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  VariableValue n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
}
{
  n1 = "set"
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n2 = VariableName()
  n4 = "to"
  { n3 = JTBToolkit.makeNodeToken(n4); }
  n5 = VariableValue()
  n7 = "."
  { n6 = JTBToolkit.makeNodeToken(n7); }
  { return new VariableAssign(n0, n2, n3, n5, n6); }
}

VariableValue VariableValue() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  MathExpression n3 = null;
  GetFrom n4 = null;
}
{
  (
    LOOKAHEAD( 2 )
    n2 = < STRING_LITERAL >
    { n1 = JTBToolkit.makeNodeToken(n2); }
    { n0 = new NodeChoice(n1, 0, 3); }
  |
    n3 = MathExpression()
    { n0 = new NodeChoice(n3, 1, 3); }
  |
    n4 = GetFrom()
    { n0 = new NodeChoice(n4, 2, 3); }
  )
  { return new VariableValue(n0); }
}

GetFrom GetFrom() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  VariableName n2 = null;
}
{
  n1 = "getfrom"
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n2 = VariableName()
  { return new GetFrom(n0, n2); }
}

VariableName VariableName() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
}
{
  n1 = < IDENTIFIER >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  { return new VariableName(n0); }
}

Proceed Proceed() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  VariableName n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
}
{
  n1 = "proceed"
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n2 = VariableName()
  n4 = "."
  { n3 = JTBToolkit.makeNodeToken(n4); }
  { return new Proceed(n0, n2, n3); }
}

JavaStaticMethods JavaStaticMethods() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeOptional n4 = new NodeOptional();
  NodeSequence n5 = null;
  VariableValue n6 = null;
  NodeListOptional n7 = null;
  NodeSequence n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
  VariableValue n11 = null;
  NodeToken n12 = null;
  Token n13 = null;
  NodeToken n14 = null;
  Token n15 = null;
  NodeToken n16 = null;
  Token n17 = null;
  NodeListOptional n18 = new NodeListOptional();
  NodeSequence n19 = null;
  NodeToken n20 = null;
  Token n21 = null;
  NodeToken n22 = null;
  Token n23 = null;
  NodeToken n24 = null;
  Token n25 = null;
}
{
  n1 = < IDENTIFIER >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = "("
  { n2 = JTBToolkit.makeNodeToken(n3); }
  (
    { n7 = new NodeListOptional(); }
    { n5 = new NodeSequence(2); }
    n6 = VariableValue()
    { n5.addNode(n6); }
    (
      { n8 = new NodeSequence(2); }
      n10 = ","
      { n9 = JTBToolkit.makeNodeToken(n10); }
      { n8.addNode(n9); }
      n11 = VariableValue()
      { n8.addNode(n11); }
      { n7.addNode(n8); }
    )*
    { n7.nodes.trimToSize(); }
    { n5.addNode(n7); }
    { n4.addNode(n5); }
  )?
  n13 = ")"
  { n12 = JTBToolkit.makeNodeToken(n13); }
  n15 = "->"
  { n14 = JTBToolkit.makeNodeToken(n15); }
  n17 = < IDENTIFIER >
  { n16 = JTBToolkit.makeNodeToken(n17); }
  (
    { n19 = new NodeSequence(2); }
    n21 = ","
    { n20 = JTBToolkit.makeNodeToken(n21); }
    { n19.addNode(n20); }
    n23 = < IDENTIFIER >
    { n22 = JTBToolkit.makeNodeToken(n23); }
    { n19.addNode(n22); }
    { n18.addNode(n19); }
  )*
  { n18.nodes.trimToSize(); }
  n25 = "."
  { n24 = JTBToolkit.makeNodeToken(n25); }
  { return new JavaStaticMethods(n0, n2, n4, n12, n14, n16, n18, n24); }
}

IfExpression IfExpression() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  RelationalExpression n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeListOptional n5 = new NodeListOptional();
  StatementExpression n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
}
{
  n1 = "if"
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n2 = RelationalExpression()
  n4 = "then"
  { n3 = JTBToolkit.makeNodeToken(n4); }
  (
    n6 = StatementExpression()
    { n5.addNode(n6); }
  )*
  { n5.nodes.trimToSize(); }
  n8 = "end"
  { n7 = JTBToolkit.makeNodeToken(n8); }
  { return new IfExpression(n0, n2, n3, n5, n7); }
}

WhileExpression WhileExpression() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  RelationalExpression n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeListOptional n5 = new NodeListOptional();
  StatementExpression n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
}
{
  n1 = "while"
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n2 = RelationalExpression()
  n4 = "then"
  { n3 = JTBToolkit.makeNodeToken(n4); }
  (
    n6 = StatementExpression()
    { n5.addNode(n6); }
  )*
  { n5.nodes.trimToSize(); }
  n8 = "end"
  { n7 = JTBToolkit.makeNodeToken(n8); }
  { return new WhileExpression(n0, n2, n3, n5, n7); }
}

CmdExpression CmdExpression() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  VariableName n2 = null;
  NodeListOptional n3 = new NodeListOptional();
  StatementExpression n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
}
{
  n1 = "cmd"
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n2 = VariableName()
  (
    n4 = StatementExpression()
    { n3.addNode(n4); }
  )*
  { n3.nodes.trimToSize(); }
  n6 = "end"
  { n5 = JTBToolkit.makeNodeToken(n6); }
  { return new CmdExpression(n0, n2, n3, n5); }
}

FuncExpression FuncExpression() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  VariableName n2 = null;
  NodeListOptional n3 = new NodeListOptional();
  StatementExpression n4 = null;
  ReturnStatement n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
}
{
  n1 = "function"
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n2 = VariableName()
  (
    n4 = StatementExpression()
    { n3.addNode(n4); }
  )*
  { n3.nodes.trimToSize(); }
  n5 = ReturnStatement()
  n7 = "."
  { n6 = JTBToolkit.makeNodeToken(n7); }
  n9 = "end"
  { n8 = JTBToolkit.makeNodeToken(n9); }
  { return new FuncExpression(n0, n2, n3, n5, n6, n8); }
}

ReturnStatement ReturnStatement() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  VariableValue n4 = null;
  JavaStaticMethods n5 = null;
}
{
  (
    { n1 = new NodeSequence(2); }
    n3 = "return"
    { n2 = JTBToolkit.makeNodeToken(n3); }
    { n1.addNode(n2); }
    n4 = VariableValue()
    { n1.addNode(n4); }
    { n0 = new NodeChoice(n1, 0, 2); }
  |
    LOOKAHEAD( 2 )
    n5 = JavaStaticMethods()
    { n0 = new NodeChoice(n5, 1, 2); }
  )
  { return new ReturnStatement(n0); }
}

MathExpression MathExpression() :
{
  // --- JTB generated node declarations ---
  AdditiveExpression n0 = null;
}
{
  n0 = AdditiveExpression()
  { return new MathExpression(n0); }
}

AdditiveExpression AdditiveExpression() :
{
  // --- JTB generated node declarations ---
  MultiplicativeExpression n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  NodeSequence n2 = null;
  NodeChoice n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  MultiplicativeExpression n10 = null;
}
{
  n0 = MultiplicativeExpression()
  (
    { n2 = new NodeSequence(2); }
    (
      (
        n5 = "+"
        { n4 = JTBToolkit.makeNodeToken(n5); }
        { n3 = new NodeChoice(n4, 0, 3); }
      |
        n7 = "-"
        { n6 = JTBToolkit.makeNodeToken(n7); }
        { n3 = new NodeChoice(n6, 1, 3); }
      |
        n9 = "&"
        { n8 = JTBToolkit.makeNodeToken(n9); }
        { n3 = new NodeChoice(n8, 2, 3); }
      )
      
    )
    { n2.addNode(n3); }
    n10 = MultiplicativeExpression()
    { n2.addNode(n10); }
    { n1.addNode(n2); }
  )*
  { n1.nodes.trimToSize(); }
  { return new AdditiveExpression(n0, n1); }
}

MultiplicativeExpression MultiplicativeExpression() :
{
  // --- JTB generated node declarations ---
  UnaryExpression n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  NodeSequence n2 = null;
  NodeChoice n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  UnaryExpression n10 = null;
}
{
  n0 = UnaryExpression()
  (
    { n2 = new NodeSequence(2); }
    (
      (
        n5 = "*"
        { n4 = JTBToolkit.makeNodeToken(n5); }
        { n3 = new NodeChoice(n4, 0, 3); }
      |
        n7 = "/"
        { n6 = JTBToolkit.makeNodeToken(n7); }
        { n3 = new NodeChoice(n6, 1, 3); }
      |
        n9 = "%"
        { n8 = JTBToolkit.makeNodeToken(n9); }
        { n3 = new NodeChoice(n8, 2, 3); }
      )
      
    )
    { n2.addNode(n3); }
    n10 = UnaryExpression()
    { n2.addNode(n10); }
    { n1.addNode(n2); }
  )*
  { n1.nodes.trimToSize(); }
  { return new MultiplicativeExpression(n0, n1); }
}

UnaryExpression UnaryExpression() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  MathExpression n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
  VariableName n11 = null;
}
{
  (
    { n1 = new NodeSequence(3); }
    n3 = "("
    { n2 = JTBToolkit.makeNodeToken(n3); }
    { n1.addNode(n2); }
    n4 = MathExpression()
    { n1.addNode(n4); }
    n6 = ")"
    { n5 = JTBToolkit.makeNodeToken(n6); }
    { n1.addNode(n5); }
    { n0 = new NodeChoice(n1, 0, 4); }
  |
    n8 = < INTEGER_LITERAL >
    { n7 = JTBToolkit.makeNodeToken(n8); }
    { n0 = new NodeChoice(n7, 1, 4); }
  |
    n10 = < STRING_LITERAL >
    { n9 = JTBToolkit.makeNodeToken(n10); }
    { n0 = new NodeChoice(n9, 2, 4); }
  |
    n11 = VariableName()
    { n0 = new NodeChoice(n11, 3, 4); }
  )
  { return new UnaryExpression(n0); }
}

/* Start Simple Relational Test */
RelationalExpression RelationalExpression() :
{
  // --- JTB generated node declarations ---
  RelationalEqualityExpression n0 = null;
}
{
  n0 = RelationalEqualityExpression()
  { return new RelationalExpression(n0); }
}

RelationalEqualityExpression RelationalEqualityExpression() :
{
  // --- JTB generated node declarations ---
  RelationalGreaterExpression n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  NodeSequence n2 = null;
  NodeChoice n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  RelationalGreaterExpression n8 = null;
}
{
  n0 = RelationalGreaterExpression()
  (
    { n2 = new NodeSequence(2); }
    (
      (
        n5 = "=="
        { n4 = JTBToolkit.makeNodeToken(n5); }
        { n3 = new NodeChoice(n4, 0, 2); }
      |
        n7 = "!="
        { n6 = JTBToolkit.makeNodeToken(n7); }
        { n3 = new NodeChoice(n6, 1, 2); }
      )
      
    )
    { n2.addNode(n3); }
    n8 = RelationalGreaterExpression()
    { n2.addNode(n8); }
    { n1.addNode(n2); }
  )*
  { n1.nodes.trimToSize(); }
  { return new RelationalEqualityExpression(n0, n1); }
}

RelationalGreaterExpression RelationalGreaterExpression() :
{
  // --- JTB generated node declarations ---
  RelationalLessExpression n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  NodeSequence n2 = null;
  NodeChoice n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  RelationalLessExpression n8 = null;
}
{
  n0 = RelationalLessExpression()
  (
    { n2 = new NodeSequence(2); }
    (
      (
        n5 = ">"
        { n4 = JTBToolkit.makeNodeToken(n5); }
        { n3 = new NodeChoice(n4, 0, 2); }
      |
        n7 = ">="
        { n6 = JTBToolkit.makeNodeToken(n7); }
        { n3 = new NodeChoice(n6, 1, 2); }
      )
      
    )
    { n2.addNode(n3); }
    n8 = RelationalLessExpression()
    { n2.addNode(n8); }
    { n1.addNode(n2); }
  )*
  { n1.nodes.trimToSize(); }
  { return new RelationalGreaterExpression(n0, n1); }
}

RelationalLessExpression RelationalLessExpression() :
{
  // --- JTB generated node declarations ---
  UnaryRelational n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  NodeSequence n2 = null;
  NodeChoice n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  UnaryRelational n8 = null;
}
{
  n0 = UnaryRelational()
  (
    { n2 = new NodeSequence(2); }
    (
      (
        n5 = "<"
        { n4 = JTBToolkit.makeNodeToken(n5); }
        { n3 = new NodeChoice(n4, 0, 2); }
      |
        n7 = "<="
        { n6 = JTBToolkit.makeNodeToken(n7); }
        { n3 = new NodeChoice(n6, 1, 2); }
      )
      
    )
    { n2.addNode(n3); }
    n8 = UnaryRelational()
    { n2.addNode(n8); }
    { n1.addNode(n2); }
  )*
  { n1.nodes.trimToSize(); }
  { return new RelationalLessExpression(n0, n1); }
}

UnaryRelational UnaryRelational() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  VariableName n5 = null;
}
{
  (
    n2 = < INTEGER_LITERAL >
    { n1 = JTBToolkit.makeNodeToken(n2); }
    { n0 = new NodeChoice(n1, 0, 3); }
  |
    n4 = < STRING_LITERAL >
    { n3 = JTBToolkit.makeNodeToken(n4); }
    { n0 = new NodeChoice(n3, 1, 3); }
  |
    n5 = VariableName()
    { n0 = new NodeChoice(n5, 2, 3); }
  )
  { return new UnaryRelational(n0); }
}

Identifier Identifier() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
}
{
  n1 = < IDENTIFIER >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  { return new Identifier(n0); }
}

MyInteger MyInteger() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
}
{
  n1 = < INTEGER_LITERAL >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  { return new MyInteger(n0); }
}
