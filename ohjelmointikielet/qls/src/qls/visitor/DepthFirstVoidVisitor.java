/* Generated by JTB 1.4.4 */
package qls.visitor;

import qls.syntaxtree.*;
import java.util.*;

public class DepthFirstVoidVisitor implements IVoidVisitor {


  public void visit(final NodeChoice n) {
    n.choice.accept(this);
    return;
  }

  public void visit(final NodeList n) {
    for (final Iterator<INode> e = n.elements(); e.hasNext();) {
      e.next().accept(this);
    }
    return;
  }

  public void visit(final NodeListOptional n) {
    if (n.present()) {
      for (final Iterator<INode> e = n.elements(); e.hasNext();) {
        e.next().accept(this);
        }
      return;
    } else
      return;
  }

  public void visit(final NodeOptional n) {
    if (n.present()) {
      n.node.accept(this);
      return;
    } else
    return;
  }

  public void visit(final NodeSequence n) {
    for (final Iterator<INode> e = n.elements(); e.hasNext();) {
      e.next().accept(this);
    }
    return;
  }

  public void visit(final NodeToken n) {
    @SuppressWarnings("unused")
    final String tkIm = n.tokenImage;
    return;
  }

  public void visit(final Start n) {
    n.f0.accept(this);
    n.f1.accept(this);
    n.f2.accept(this);
    n.f3.accept(this);
    n.f4.accept(this);
    n.f5.accept(this);
  }

  public void visit(final GlobalExpression n) {
    n.f0.accept(this);
  }

  public void visit(final CreateNew n) {
    n.f0.accept(this);
    n.f1.accept(this);
    n.f2.accept(this);
  }

  public void visit(final Use n) {
    n.f0.accept(this);
    n.f1.accept(this);
  }

  public void visit(final Main n) {
    n.f0.accept(this);
    n.f1.accept(this);
    n.f2.accept(this);
  }

  public void visit(final StatementExpression n) {
    n.f0.accept(this);
  }

  public void visit(final FieldDeclaration n) {
    n.f0.accept(this);
    n.f1.accept(this);
    n.f2.accept(this);
    n.f3.accept(this);
    n.f4.accept(this);
  }

  public void visit(final VariableDeclaration n) {
    n.f0.accept(this);
    n.f1.accept(this);
    n.f2.accept(this);
    n.f3.accept(this);
    n.f4.accept(this);
  }

  public void visit(final VariableAssign n) {
    n.f0.accept(this);
    n.f1.accept(this);
    n.f2.accept(this);
    n.f3.accept(this);
    n.f4.accept(this);
  }

  public void visit(final VariableValue n) {
    n.f0.accept(this);
  }

  public void visit(final GetFrom n) {
    n.f0.accept(this);
    n.f1.accept(this);
  }

  public void visit(final VariableName n) {
    n.f0.accept(this);
  }

  public void visit(final Proceed n) {
    n.f0.accept(this);
    n.f1.accept(this);
    n.f2.accept(this);
  }

  public void visit(final JavaStaticMethods n) {
    n.f0.accept(this);
    n.f1.accept(this);
    n.f2.accept(this);
    n.f3.accept(this);
    n.f4.accept(this);
    n.f5.accept(this);
    n.f6.accept(this);
    n.f7.accept(this);
  }

  public void visit(final IfExpression n) {
    n.f0.accept(this);
    n.f1.accept(this);
    n.f2.accept(this);
    n.f3.accept(this);
    n.f4.accept(this);
  }

  public void visit(final WhileExpression n) {
    n.f0.accept(this);
    n.f1.accept(this);
    n.f2.accept(this);
    n.f3.accept(this);
    n.f4.accept(this);
  }

  public void visit(final CmdExpression n) {
    n.f0.accept(this);
    n.f1.accept(this);
    n.f2.accept(this);
    n.f3.accept(this);
  }

  public void visit(final FuncExpression n) {
    n.f0.accept(this);
    n.f1.accept(this);
    n.f2.accept(this);
    n.f3.accept(this);
    n.f4.accept(this);
    n.f5.accept(this);
  }

  public void visit(final ReturnStatement n) {
    n.f0.accept(this);
  }

  public void visit(final MathExpression n) {
    n.f0.accept(this);
  }

  public void visit(final AdditiveExpression n) {
    n.f0.accept(this);
    n.f1.accept(this);
  }

  public void visit(final MultiplicativeExpression n) {
    n.f0.accept(this);
    n.f1.accept(this);
  }

  public void visit(final UnaryExpression n) {
    n.f0.accept(this);
  }

  public void visit(final RelationalExpression n) {
    n.f0.accept(this);
  }

  public void visit(final RelationalEqualityExpression n) {
    n.f0.accept(this);
    n.f1.accept(this);
  }

  public void visit(final RelationalGreaterExpression n) {
    n.f0.accept(this);
    n.f1.accept(this);
  }

  public void visit(final RelationalLessExpression n) {
    n.f0.accept(this);
    n.f1.accept(this);
  }

  public void visit(final UnaryRelational n) {
    n.f0.accept(this);
  }

  public void visit(final Identifier n) {
    n.f0.accept(this);
  }

  public void visit(final MyInteger n) {
    n.f0.accept(this);
  }

}
