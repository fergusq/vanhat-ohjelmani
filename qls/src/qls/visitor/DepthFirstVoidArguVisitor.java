/* Generated by JTB 1.4.4 */
package qls.visitor;

import qls.syntaxtree.*;
import java.util.*;

public class DepthFirstVoidArguVisitor<A> implements IVoidArguVisitor<A> {


  public void visit(final NodeChoice n, final A argu) {
    n.choice.accept(this, argu);
    return;
  }

  public void visit(final NodeList n, final A argu) {
    for (final Iterator<INode> e = n.elements(); e.hasNext();) {
      e.next().accept(this, argu);
    }
    return;
  }

  public void visit(final NodeListOptional n, final A argu) {
    if (n.present()) {
      for (final Iterator<INode> e = n.elements(); e.hasNext();) {
        e.next().accept(this, argu);
        }
      return;
    } else
      return;
  }

  public void visit(final NodeOptional n, final A argu) {
    if (n.present()) {
      n.node.accept(this, argu);
      return;
    } else
    return;
  }

  public void visit(final NodeSequence n, final A argu) {
    for (final Iterator<INode> e = n.elements(); e.hasNext();) {
      e.next().accept(this, argu);
    }
    return;
  }

  public void visit(final NodeToken n, @SuppressWarnings("unused") final A argu) {
    @SuppressWarnings("unused")
    final String tkIm = n.tokenImage;
    return;
  }

  public void visit(final Start n, final A argu) {
    n.f0.accept(this, argu);
    n.f1.accept(this, argu);
    n.f2.accept(this, argu);
    n.f3.accept(this, argu);
    n.f4.accept(this, argu);
    n.f5.accept(this, argu);
  }

  public void visit(final GlobalExpression n, final A argu) {
    n.f0.accept(this, argu);
  }

  public void visit(final CreateNew n, final A argu) {
    n.f0.accept(this, argu);
    n.f1.accept(this, argu);
    n.f2.accept(this, argu);
  }

  public void visit(final Use n, final A argu) {
    n.f0.accept(this, argu);
    n.f1.accept(this, argu);
  }

  public void visit(final Main n, final A argu) {
    n.f0.accept(this, argu);
    n.f1.accept(this, argu);
    n.f2.accept(this, argu);
  }

  public void visit(final StatementExpression n, final A argu) {
    n.f0.accept(this, argu);
  }

  public void visit(final FieldDeclaration n, final A argu) {
    n.f0.accept(this, argu);
    n.f1.accept(this, argu);
    n.f2.accept(this, argu);
    n.f3.accept(this, argu);
    n.f4.accept(this, argu);
  }

  public void visit(final VariableDeclaration n, final A argu) {
    n.f0.accept(this, argu);
    n.f1.accept(this, argu);
    n.f2.accept(this, argu);
    n.f3.accept(this, argu);
    n.f4.accept(this, argu);
  }

  public void visit(final VariableAssign n, final A argu) {
    n.f0.accept(this, argu);
    n.f1.accept(this, argu);
    n.f2.accept(this, argu);
    n.f3.accept(this, argu);
    n.f4.accept(this, argu);
  }

  public void visit(final VariableValue n, final A argu) {
    n.f0.accept(this, argu);
  }

  public void visit(final GetFrom n, final A argu) {
    n.f0.accept(this, argu);
    n.f1.accept(this, argu);
  }

  public void visit(final VariableName n, final A argu) {
    n.f0.accept(this, argu);
  }

  public void visit(final Proceed n, final A argu) {
    n.f0.accept(this, argu);
    n.f1.accept(this, argu);
    n.f2.accept(this, argu);
  }

  public void visit(final JavaStaticMethods n, final A argu) {
    n.f0.accept(this, argu);
    n.f1.accept(this, argu);
    n.f2.accept(this, argu);
    n.f3.accept(this, argu);
    n.f4.accept(this, argu);
    n.f5.accept(this, argu);
    n.f6.accept(this, argu);
    n.f7.accept(this, argu);
  }

  public void visit(final IfExpression n, final A argu) {
    n.f0.accept(this, argu);
    n.f1.accept(this, argu);
    n.f2.accept(this, argu);
    n.f3.accept(this, argu);
    n.f4.accept(this, argu);
  }

  public void visit(final WhileExpression n, final A argu) {
    n.f0.accept(this, argu);
    n.f1.accept(this, argu);
    n.f2.accept(this, argu);
    n.f3.accept(this, argu);
    n.f4.accept(this, argu);
  }

  public void visit(final CmdExpression n, final A argu) {
    n.f0.accept(this, argu);
    n.f1.accept(this, argu);
    n.f2.accept(this, argu);
    n.f3.accept(this, argu);
  }

  public void visit(final FuncExpression n, final A argu) {
    n.f0.accept(this, argu);
    n.f1.accept(this, argu);
    n.f2.accept(this, argu);
    n.f3.accept(this, argu);
    n.f4.accept(this, argu);
    n.f5.accept(this, argu);
  }

  public void visit(final ReturnStatement n, final A argu) {
    n.f0.accept(this, argu);
  }

  public void visit(final MathExpression n, final A argu) {
    n.f0.accept(this, argu);
  }

  public void visit(final AdditiveExpression n, final A argu) {
    n.f0.accept(this, argu);
    n.f1.accept(this, argu);
  }

  public void visit(final MultiplicativeExpression n, final A argu) {
    n.f0.accept(this, argu);
    n.f1.accept(this, argu);
  }

  public void visit(final UnaryExpression n, final A argu) {
    n.f0.accept(this, argu);
  }

  public void visit(final RelationalExpression n, final A argu) {
    n.f0.accept(this, argu);
  }

  public void visit(final RelationalEqualityExpression n, final A argu) {
    n.f0.accept(this, argu);
    n.f1.accept(this, argu);
  }

  public void visit(final RelationalGreaterExpression n, final A argu) {
    n.f0.accept(this, argu);
    n.f1.accept(this, argu);
  }

  public void visit(final RelationalLessExpression n, final A argu) {
    n.f0.accept(this, argu);
    n.f1.accept(this, argu);
  }

  public void visit(final UnaryRelational n, final A argu) {
    n.f0.accept(this, argu);
  }

  public void visit(final Identifier n, final A argu) {
    n.f0.accept(this, argu);
  }

  public void visit(final MyInteger n, final A argu) {
    n.f0.accept(this, argu);
  }

}
